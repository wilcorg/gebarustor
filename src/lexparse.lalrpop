use std::str::FromStr;

use crate::ast::*;

grammar;

match {
    ";",
    ":",
    ",",
    "[",
    "]",
    "(",
    ")",
    ":=",
    "+",
    "-",
    "*",
    "/",
    "%",
    "=",
    "!=",
    ">",
    "<",
    ">=",
    "<=",
    r"[0-9]+",
    r"[_a-z]+",
    "PROCEDURE",
    "IS",
    "BEGIN",
    "END",
    "PROGRAM",
    "IF",
    "THEN",
    "ELSE",
    "ENDIF",
    "WHILE",
    "DO",
    "ENDWHILE",
    "REPEAT",
    "UNTIL",
    "FOR",
    "FROM",
    "TO",
    "DOWNTO",
    "ENDFOR",
    "READ",
    "WRITE",
    "T",
    "\n" => {},
    r"\s*" => {}, // Skip whitespace
    r"#[^\n\r]*[\n\r]*" => {}, // Skip `# comment`
}

// TODO probably should be mut
pub Program: Program = {
    </*mut */procedures:Procedures?> <main:Main> => (procedures, main),
};

Procedures: Procedures = {
    <mut procedures:Procedures> "PROCEDURE" <procedure_head:ProcedureHead> "IS" <declarations:Declarations?> "BEGIN" <commands:Commands> "END" => {
        procedures.push((procedure_head, declarations, commands));
        procedures
    },
    "PROCEDURE" <procedure_head:ProcedureHead> "IS" <declarations:Declarations?> "BEGIN" <commands:Commands> "END" => vec![(procedure_head, declarations, commands)],
};

Main: Main = {
    "PROGRAM" "IS" <declarations:Declarations?> "BEGIN" <commands:Commands> "END" => (declarations, commands),
};

Commands: Commands = {
    <mut commands:Commands> <command:Command> => {
        commands.push(command);
        commands
    },
    <command: Command> => vec![command],
};

Command: Command = {
    <id:Identifier> ":=" <expression:Expression> => Command::Assign(id, expression),
    "IF" <condition:Condition> "THEN" <commands0:Commands> "ELSE" <commands1:Commands> "ENDIF" => Command::If(condition, commands0, Some(commands1)),
    "IF" <condition:Condition> "THEN" <commands:Commands> "ENDIF" => Command::If(condition, commands, None),
    "WHILE" <condition:Condition> "DO" <commands:Commands> "ENDWHILE" => Command::While(condition, commands),
    "REPEAT" <commands:Commands> "UNTIL" <condition:Condition> ";" => Command::Repeat(commands, condition),
    "FOR" <p:Pidentifier> "FROM" <from:Value> "TO" <to:Value> "DO" <commands:Commands> "ENDFOR" => Command::For(p, from, LoopDirection::Up, to, commands),  // TODO replace true with enum
    "FOR" <p:Pidentifier> "FROM" <from:Value> "DOWNTO" <to:Value> "DO" <commands:Commands> "ENDFOR" => Command::For(p, from, LoopDirection::Down, to, commands),  // TODO replace true with enum
    <procedure_call:ProcedureCall> ";" => Command::ProcCall(procedure_call),
    "READ" <id:Identifier> ";" => Command::Read(id),
    "WRITE" <value:Value> ";" => Command::Write(value),
};

ProcedureHead: ProcedureHead = {
    <p:Pidentifier> "(" <a: ArgumentsDeclaration> ")" => (p, a),
};

ProcedureCall: ProcedureCall = {
    <p:Pidentifier> "(" <a:Arguments> ")" => (p, a),
};

Declarations: Declarations = {
    <mut v:Declarations> "," <p: Pidentifier> => {
        v.push(DeclarationVariant::Base(p));
        v
    },
    <mut v:Declarations> "," <p: Pidentifier> "[" <from:Num> ":" <to:Num> "]" => {
        v.push(DeclarationVariant::NumIndexed(p, from, to));
        v
    },
    <p: Pidentifier> => vec![DeclarationVariant::Base(p)],
    <p: Pidentifier> "[" <from:Num> ":" <to:Num> "]" => vec![DeclarationVariant::NumIndexed(p, from, to)],
};

ArgumentsDeclaration: ArgumentsDeclaration = {
    <mut v:ArgumentsDeclaration> "," <p: Pidentifier> => {
        v.push(ArgumentsDeclarationVariant::Base(p));
        v
    },
    <mut v:ArgumentsDeclaration> "," "T" <p: Pidentifier> => {
        v.push(ArgumentsDeclarationVariant::Table(p));
        v
    },
    "T" <p: Pidentifier> => vec![ArgumentsDeclarationVariant::Table(p)],
    <p: Pidentifier> => vec![ArgumentsDeclarationVariant::Base(p)],
};

Arguments: Arguments = {
    <mut v:(<Pidentifier> ",")*> <e:Pidentifier?> => match e {
        None=> v,
        Some(e) => {
            v.push(e);
            v
        }
    },
};

Expression: Expression = {
    <v:Value> => Expression::Val(v),
    <v0:Value> "+" <v1:Value>=> Expression::Add(v0, v1),
    <v0:Value> "-" <v1:Value>=> Expression::Subtract(v0, v1),
    <v0:Value> "*" <v1:Value>=> Expression::Multiply(v0, v1),
    <v0:Value> "/" <v1:Value>=> Expression::Divide(v0, v1),
    <v0:Value> "%" <v1:Value>=> Expression::Modulo(v0, v1),
};

Condition: Condition = {
    <v0:Value> "=" <v1:Value> => Condition::Equal(v0, v1),
    <v0:Value> "!=" <v1:Value> => Condition::NotEqual(v0, v1),
    <v0:Value> ">" <v1:Value> => Condition::Greater(v0, v1),
    <v0:Value> "<" <v1:Value> => Condition::Lower(v0, v1),
    <v0:Value> ">=" <v1:Value> => Condition::GreaterOrEqual(v0, v1),
    <v0:Value> "<=" <v1:Value> => Condition::LowerOrEqual(v0, v1),
};

Value: Value = {
    <n:Num> => Value::Num(n),
    <id:Identifier> => Value::Id(id),
};

Identifier: Identifier = {
    <p: Pidentifier> => Identifier::Base(p),
    <p: Pidentifier> "[" <n: Num> "]" => Identifier::NumIndexed(p, n),
    <p0: Pidentifier> "[" <p1: Pidentifier> "]" => Identifier::PidIndexed(p0, p1),
};

Num: Num = <s:r"[0-9]+"> => u64::from_str(s).unwrap();

Pidentifier: Pidentifier = <start: @L> <s:r"[_a-z]+"> => (s.to_string(), start);
